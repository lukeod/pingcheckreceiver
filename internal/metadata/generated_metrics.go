// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"time"

	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver"
	conventions "go.opentelemetry.io/otel/semconv/v1.27.0"
)

// AttributeErrorType specifies the value error.type attribute.
type AttributeErrorType int

const (
	_ AttributeErrorType = iota
	AttributeErrorTypeTimeout
	AttributeErrorTypeDNSFailure
	AttributeErrorTypeNetworkUnreachable
	AttributeErrorTypePermissionDenied
	AttributeErrorTypeUnknown
)

// String returns the string representation of the AttributeErrorType.
func (av AttributeErrorType) String() string {
	switch av {
	case AttributeErrorTypeTimeout:
		return "timeout"
	case AttributeErrorTypeDNSFailure:
		return "dns_failure"
	case AttributeErrorTypeNetworkUnreachable:
		return "network_unreachable"
	case AttributeErrorTypePermissionDenied:
		return "permission_denied"
	case AttributeErrorTypeUnknown:
		return "unknown"
	}
	return ""
}

// MapAttributeErrorType is a helper map of string to AttributeErrorType attribute value.
var MapAttributeErrorType = map[string]AttributeErrorType{
	"timeout":             AttributeErrorTypeTimeout,
	"dns_failure":         AttributeErrorTypeDNSFailure,
	"network_unreachable": AttributeErrorTypeNetworkUnreachable,
	"permission_denied":   AttributeErrorTypePermissionDenied,
	"unknown":             AttributeErrorTypeUnknown,
}

var MetricsInfo = metricsInfo{
	PingDuration: metricInfo{
		Name: "ping.duration",
	},
	PingDurationAvg: metricInfo{
		Name: "ping.duration.avg",
	},
	PingDurationMax: metricInfo{
		Name: "ping.duration.max",
	},
	PingDurationMin: metricInfo{
		Name: "ping.duration.min",
	},
	PingDurationStddev: metricInfo{
		Name: "ping.duration.stddev",
	},
	PingErrors: metricInfo{
		Name: "ping.errors",
	},
	PingPacketLoss: metricInfo{
		Name: "ping.packet_loss",
	},
	PingPacketsReceived: metricInfo{
		Name: "ping.packets.received",
	},
	PingPacketsSent: metricInfo{
		Name: "ping.packets.sent",
	},
}

type metricsInfo struct {
	PingDuration        metricInfo
	PingDurationAvg     metricInfo
	PingDurationMax     metricInfo
	PingDurationMin     metricInfo
	PingDurationStddev  metricInfo
	PingErrors          metricInfo
	PingPacketLoss      metricInfo
	PingPacketsReceived metricInfo
	PingPacketsSent     metricInfo
}

type metricInfo struct {
	Name string
}

type metricPingDuration struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills ping.duration metric with initial data.
func (m *metricPingDuration) init() {
	m.data.SetName("ping.duration")
	m.data.SetDescription("Round-trip time for ping packets")
	m.data.SetUnit("ms")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricPingDuration) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val float64, netPeerNameAttributeValue string, netPeerIPAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleValue(val)
	dp.Attributes().PutStr("net.peer.name", netPeerNameAttributeValue)
	dp.Attributes().PutStr("net.peer.ip", netPeerIPAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricPingDuration) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricPingDuration) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricPingDuration(cfg MetricConfig) metricPingDuration {
	m := metricPingDuration{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricPingDurationAvg struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills ping.duration.avg metric with initial data.
func (m *metricPingDurationAvg) init() {
	m.data.SetName("ping.duration.avg")
	m.data.SetDescription("Average round-trip time")
	m.data.SetUnit("ms")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricPingDurationAvg) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val float64, netPeerNameAttributeValue string, netPeerIPAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleValue(val)
	dp.Attributes().PutStr("net.peer.name", netPeerNameAttributeValue)
	dp.Attributes().PutStr("net.peer.ip", netPeerIPAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricPingDurationAvg) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricPingDurationAvg) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricPingDurationAvg(cfg MetricConfig) metricPingDurationAvg {
	m := metricPingDurationAvg{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricPingDurationMax struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills ping.duration.max metric with initial data.
func (m *metricPingDurationMax) init() {
	m.data.SetName("ping.duration.max")
	m.data.SetDescription("Maximum round-trip time")
	m.data.SetUnit("ms")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricPingDurationMax) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val float64, netPeerNameAttributeValue string, netPeerIPAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleValue(val)
	dp.Attributes().PutStr("net.peer.name", netPeerNameAttributeValue)
	dp.Attributes().PutStr("net.peer.ip", netPeerIPAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricPingDurationMax) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricPingDurationMax) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricPingDurationMax(cfg MetricConfig) metricPingDurationMax {
	m := metricPingDurationMax{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricPingDurationMin struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills ping.duration.min metric with initial data.
func (m *metricPingDurationMin) init() {
	m.data.SetName("ping.duration.min")
	m.data.SetDescription("Minimum round-trip time")
	m.data.SetUnit("ms")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricPingDurationMin) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val float64, netPeerNameAttributeValue string, netPeerIPAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleValue(val)
	dp.Attributes().PutStr("net.peer.name", netPeerNameAttributeValue)
	dp.Attributes().PutStr("net.peer.ip", netPeerIPAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricPingDurationMin) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricPingDurationMin) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricPingDurationMin(cfg MetricConfig) metricPingDurationMin {
	m := metricPingDurationMin{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricPingDurationStddev struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills ping.duration.stddev metric with initial data.
func (m *metricPingDurationStddev) init() {
	m.data.SetName("ping.duration.stddev")
	m.data.SetDescription("Standard deviation of round-trip times")
	m.data.SetUnit("ms")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricPingDurationStddev) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val float64, netPeerNameAttributeValue string, netPeerIPAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleValue(val)
	dp.Attributes().PutStr("net.peer.name", netPeerNameAttributeValue)
	dp.Attributes().PutStr("net.peer.ip", netPeerIPAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricPingDurationStddev) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricPingDurationStddev) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricPingDurationStddev(cfg MetricConfig) metricPingDurationStddev {
	m := metricPingDurationStddev{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricPingErrors struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills ping.errors metric with initial data.
func (m *metricPingErrors) init() {
	m.data.SetName("ping.errors")
	m.data.SetDescription("Number of errors encountered")
	m.data.SetUnit("{error}")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityUnspecified)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricPingErrors) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, netPeerNameAttributeValue string, netPeerIPAttributeValue string, errorTypeAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("net.peer.name", netPeerNameAttributeValue)
	dp.Attributes().PutStr("net.peer.ip", netPeerIPAttributeValue)
	dp.Attributes().PutStr("error.type", errorTypeAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricPingErrors) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricPingErrors) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricPingErrors(cfg MetricConfig) metricPingErrors {
	m := metricPingErrors{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricPingPacketLoss struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills ping.packet_loss metric with initial data.
func (m *metricPingPacketLoss) init() {
	m.data.SetName("ping.packet_loss")
	m.data.SetDescription("Ratio of packets lost")
	m.data.SetUnit("1")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricPingPacketLoss) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val float64, netPeerNameAttributeValue string, netPeerIPAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleValue(val)
	dp.Attributes().PutStr("net.peer.name", netPeerNameAttributeValue)
	dp.Attributes().PutStr("net.peer.ip", netPeerIPAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricPingPacketLoss) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricPingPacketLoss) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricPingPacketLoss(cfg MetricConfig) metricPingPacketLoss {
	m := metricPingPacketLoss{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricPingPacketsReceived struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills ping.packets.received metric with initial data.
func (m *metricPingPacketsReceived) init() {
	m.data.SetName("ping.packets.received")
	m.data.SetDescription("Number of packets received")
	m.data.SetUnit("{packet}")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityUnspecified)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricPingPacketsReceived) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, netPeerNameAttributeValue string, netPeerIPAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("net.peer.name", netPeerNameAttributeValue)
	dp.Attributes().PutStr("net.peer.ip", netPeerIPAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricPingPacketsReceived) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricPingPacketsReceived) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricPingPacketsReceived(cfg MetricConfig) metricPingPacketsReceived {
	m := metricPingPacketsReceived{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricPingPacketsSent struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills ping.packets.sent metric with initial data.
func (m *metricPingPacketsSent) init() {
	m.data.SetName("ping.packets.sent")
	m.data.SetDescription("Number of packets sent")
	m.data.SetUnit("{packet}")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityUnspecified)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricPingPacketsSent) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, netPeerNameAttributeValue string, netPeerIPAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("net.peer.name", netPeerNameAttributeValue)
	dp.Attributes().PutStr("net.peer.ip", netPeerIPAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricPingPacketsSent) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricPingPacketsSent) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricPingPacketsSent(cfg MetricConfig) metricPingPacketsSent {
	m := metricPingPacketsSent{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

// MetricsBuilder provides an interface for scrapers to report metrics while taking care of all the transformations
// required to produce metric representation defined in metadata and user config.
type MetricsBuilder struct {
	config                    MetricsBuilderConfig // config of the metrics builder.
	startTime                 pcommon.Timestamp    // start time that will be applied to all recorded data points.
	metricsCapacity           int                  // maximum observed number of metrics per resource.
	metricsBuffer             pmetric.Metrics      // accumulates metrics data before emitting.
	buildInfo                 component.BuildInfo  // contains version information.
	metricPingDuration        metricPingDuration
	metricPingDurationAvg     metricPingDurationAvg
	metricPingDurationMax     metricPingDurationMax
	metricPingDurationMin     metricPingDurationMin
	metricPingDurationStddev  metricPingDurationStddev
	metricPingErrors          metricPingErrors
	metricPingPacketLoss      metricPingPacketLoss
	metricPingPacketsReceived metricPingPacketsReceived
	metricPingPacketsSent     metricPingPacketsSent
}

// MetricBuilderOption applies changes to default metrics builder.
type MetricBuilderOption interface {
	apply(*MetricsBuilder)
}

type metricBuilderOptionFunc func(mb *MetricsBuilder)

func (mbof metricBuilderOptionFunc) apply(mb *MetricsBuilder) {
	mbof(mb)
}

// WithStartTime sets startTime on the metrics builder.
func WithStartTime(startTime pcommon.Timestamp) MetricBuilderOption {
	return metricBuilderOptionFunc(func(mb *MetricsBuilder) {
		mb.startTime = startTime
	})
}
func NewMetricsBuilder(mbc MetricsBuilderConfig, settings receiver.Settings, options ...MetricBuilderOption) *MetricsBuilder {
	mb := &MetricsBuilder{
		config:                    mbc,
		startTime:                 pcommon.NewTimestampFromTime(time.Now()),
		metricsBuffer:             pmetric.NewMetrics(),
		buildInfo:                 settings.BuildInfo,
		metricPingDuration:        newMetricPingDuration(mbc.Metrics.PingDuration),
		metricPingDurationAvg:     newMetricPingDurationAvg(mbc.Metrics.PingDurationAvg),
		metricPingDurationMax:     newMetricPingDurationMax(mbc.Metrics.PingDurationMax),
		metricPingDurationMin:     newMetricPingDurationMin(mbc.Metrics.PingDurationMin),
		metricPingDurationStddev:  newMetricPingDurationStddev(mbc.Metrics.PingDurationStddev),
		metricPingErrors:          newMetricPingErrors(mbc.Metrics.PingErrors),
		metricPingPacketLoss:      newMetricPingPacketLoss(mbc.Metrics.PingPacketLoss),
		metricPingPacketsReceived: newMetricPingPacketsReceived(mbc.Metrics.PingPacketsReceived),
		metricPingPacketsSent:     newMetricPingPacketsSent(mbc.Metrics.PingPacketsSent),
	}

	for _, op := range options {
		op.apply(mb)
	}
	return mb
}

// updateCapacity updates max length of metrics and resource attributes that will be used for the slice capacity.
func (mb *MetricsBuilder) updateCapacity(rm pmetric.ResourceMetrics) {
	if mb.metricsCapacity < rm.ScopeMetrics().At(0).Metrics().Len() {
		mb.metricsCapacity = rm.ScopeMetrics().At(0).Metrics().Len()
	}
}

// ResourceMetricsOption applies changes to provided resource metrics.
type ResourceMetricsOption interface {
	apply(pmetric.ResourceMetrics)
}

type resourceMetricsOptionFunc func(pmetric.ResourceMetrics)

func (rmof resourceMetricsOptionFunc) apply(rm pmetric.ResourceMetrics) {
	rmof(rm)
}

// WithResource sets the provided resource on the emitted ResourceMetrics.
// It's recommended to use ResourceBuilder to create the resource.
func WithResource(res pcommon.Resource) ResourceMetricsOption {
	return resourceMetricsOptionFunc(func(rm pmetric.ResourceMetrics) {
		res.CopyTo(rm.Resource())
	})
}

// WithStartTimeOverride overrides start time for all the resource metrics data points.
// This option should be only used if different start time has to be set on metrics coming from different resources.
func WithStartTimeOverride(start pcommon.Timestamp) ResourceMetricsOption {
	return resourceMetricsOptionFunc(func(rm pmetric.ResourceMetrics) {
		var dps pmetric.NumberDataPointSlice
		metrics := rm.ScopeMetrics().At(0).Metrics()
		for i := 0; i < metrics.Len(); i++ {
			switch metrics.At(i).Type() {
			case pmetric.MetricTypeGauge:
				dps = metrics.At(i).Gauge().DataPoints()
			case pmetric.MetricTypeSum:
				dps = metrics.At(i).Sum().DataPoints()
			}
			for j := 0; j < dps.Len(); j++ {
				dps.At(j).SetStartTimestamp(start)
			}
		}
	})
}

// EmitForResource saves all the generated metrics under a new resource and updates the internal state to be ready for
// recording another set of data points as part of another resource. This function can be helpful when one scraper
// needs to emit metrics from several resources. Otherwise calling this function is not required,
// just `Emit` function can be called instead.
// Resource attributes should be provided as ResourceMetricsOption arguments.
func (mb *MetricsBuilder) EmitForResource(options ...ResourceMetricsOption) {
	rm := pmetric.NewResourceMetrics()
	rm.SetSchemaUrl(conventions.SchemaURL)
	ils := rm.ScopeMetrics().AppendEmpty()
	ils.Scope().SetName(ScopeName)
	ils.Scope().SetVersion(mb.buildInfo.Version)
	ils.Metrics().EnsureCapacity(mb.metricsCapacity)
	mb.metricPingDuration.emit(ils.Metrics())
	mb.metricPingDurationAvg.emit(ils.Metrics())
	mb.metricPingDurationMax.emit(ils.Metrics())
	mb.metricPingDurationMin.emit(ils.Metrics())
	mb.metricPingDurationStddev.emit(ils.Metrics())
	mb.metricPingErrors.emit(ils.Metrics())
	mb.metricPingPacketLoss.emit(ils.Metrics())
	mb.metricPingPacketsReceived.emit(ils.Metrics())
	mb.metricPingPacketsSent.emit(ils.Metrics())

	for _, op := range options {
		op.apply(rm)
	}

	if ils.Metrics().Len() > 0 {
		mb.updateCapacity(rm)
		rm.MoveTo(mb.metricsBuffer.ResourceMetrics().AppendEmpty())
	}
}

// Emit returns all the metrics accumulated by the metrics builder and updates the internal state to be ready for
// recording another set of metrics. This function will be responsible for applying all the transformations required to
// produce metric representation defined in metadata and user config, e.g. delta or cumulative.
func (mb *MetricsBuilder) Emit(options ...ResourceMetricsOption) pmetric.Metrics {
	mb.EmitForResource(options...)
	metrics := mb.metricsBuffer
	mb.metricsBuffer = pmetric.NewMetrics()
	return metrics
}

// RecordPingDurationDataPoint adds a data point to ping.duration metric.
func (mb *MetricsBuilder) RecordPingDurationDataPoint(ts pcommon.Timestamp, val float64, netPeerNameAttributeValue string, netPeerIPAttributeValue string) {
	mb.metricPingDuration.recordDataPoint(mb.startTime, ts, val, netPeerNameAttributeValue, netPeerIPAttributeValue)
}

// RecordPingDurationAvgDataPoint adds a data point to ping.duration.avg metric.
func (mb *MetricsBuilder) RecordPingDurationAvgDataPoint(ts pcommon.Timestamp, val float64, netPeerNameAttributeValue string, netPeerIPAttributeValue string) {
	mb.metricPingDurationAvg.recordDataPoint(mb.startTime, ts, val, netPeerNameAttributeValue, netPeerIPAttributeValue)
}

// RecordPingDurationMaxDataPoint adds a data point to ping.duration.max metric.
func (mb *MetricsBuilder) RecordPingDurationMaxDataPoint(ts pcommon.Timestamp, val float64, netPeerNameAttributeValue string, netPeerIPAttributeValue string) {
	mb.metricPingDurationMax.recordDataPoint(mb.startTime, ts, val, netPeerNameAttributeValue, netPeerIPAttributeValue)
}

// RecordPingDurationMinDataPoint adds a data point to ping.duration.min metric.
func (mb *MetricsBuilder) RecordPingDurationMinDataPoint(ts pcommon.Timestamp, val float64, netPeerNameAttributeValue string, netPeerIPAttributeValue string) {
	mb.metricPingDurationMin.recordDataPoint(mb.startTime, ts, val, netPeerNameAttributeValue, netPeerIPAttributeValue)
}

// RecordPingDurationStddevDataPoint adds a data point to ping.duration.stddev metric.
func (mb *MetricsBuilder) RecordPingDurationStddevDataPoint(ts pcommon.Timestamp, val float64, netPeerNameAttributeValue string, netPeerIPAttributeValue string) {
	mb.metricPingDurationStddev.recordDataPoint(mb.startTime, ts, val, netPeerNameAttributeValue, netPeerIPAttributeValue)
}

// RecordPingErrorsDataPoint adds a data point to ping.errors metric.
func (mb *MetricsBuilder) RecordPingErrorsDataPoint(ts pcommon.Timestamp, val int64, netPeerNameAttributeValue string, netPeerIPAttributeValue string, errorTypeAttributeValue AttributeErrorType) {
	mb.metricPingErrors.recordDataPoint(mb.startTime, ts, val, netPeerNameAttributeValue, netPeerIPAttributeValue, errorTypeAttributeValue.String())
}

// RecordPingPacketLossDataPoint adds a data point to ping.packet_loss metric.
func (mb *MetricsBuilder) RecordPingPacketLossDataPoint(ts pcommon.Timestamp, val float64, netPeerNameAttributeValue string, netPeerIPAttributeValue string) {
	mb.metricPingPacketLoss.recordDataPoint(mb.startTime, ts, val, netPeerNameAttributeValue, netPeerIPAttributeValue)
}

// RecordPingPacketsReceivedDataPoint adds a data point to ping.packets.received metric.
func (mb *MetricsBuilder) RecordPingPacketsReceivedDataPoint(ts pcommon.Timestamp, val int64, netPeerNameAttributeValue string, netPeerIPAttributeValue string) {
	mb.metricPingPacketsReceived.recordDataPoint(mb.startTime, ts, val, netPeerNameAttributeValue, netPeerIPAttributeValue)
}

// RecordPingPacketsSentDataPoint adds a data point to ping.packets.sent metric.
func (mb *MetricsBuilder) RecordPingPacketsSentDataPoint(ts pcommon.Timestamp, val int64, netPeerNameAttributeValue string, netPeerIPAttributeValue string) {
	mb.metricPingPacketsSent.recordDataPoint(mb.startTime, ts, val, netPeerNameAttributeValue, netPeerIPAttributeValue)
}

// Reset resets metrics builder to its initial state. It should be used when external metrics source is restarted,
// and metrics builder should update its startTime and reset it's internal state accordingly.
func (mb *MetricsBuilder) Reset(options ...MetricBuilderOption) {
	mb.startTime = pcommon.NewTimestampFromTime(time.Now())
	for _, op := range options {
		op.apply(mb)
	}
}
