// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver/receivertest"
	"go.uber.org/zap"
	"go.uber.org/zap/zaptest/observer"
)

type testDataSet int

const (
	testDataSetDefault testDataSet = iota
	testDataSetAll
	testDataSetNone
)

func TestMetricsBuilder(t *testing.T) {
	tests := []struct {
		name        string
		metricsSet  testDataSet
		resAttrsSet testDataSet
		expectEmpty bool
	}{
		{
			name: "default",
		},
		{
			name:        "all_set",
			metricsSet:  testDataSetAll,
			resAttrsSet: testDataSetAll,
		},
		{
			name:        "none_set",
			metricsSet:  testDataSetNone,
			resAttrsSet: testDataSetNone,
			expectEmpty: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			start := pcommon.Timestamp(1_000_000_000)
			ts := pcommon.Timestamp(1_000_001_000)
			observedZapCore, observedLogs := observer.New(zap.WarnLevel)
			settings := receivertest.NewNopSettings(receivertest.NopType)
			settings.Logger = zap.New(observedZapCore)
			mb := NewMetricsBuilder(loadMetricsBuilderConfig(t, tt.name), settings, WithStartTime(start))

			expectedWarnings := 0

			assert.Equal(t, expectedWarnings, observedLogs.Len())

			defaultMetricsCount := 0
			allMetricsCount := 0

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordPingDurationDataPoint(ts, 1, "net.peer.name-val", "net.peer.ip-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordPingDurationAvgDataPoint(ts, 1, "net.peer.name-val", "net.peer.ip-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordPingDurationMaxDataPoint(ts, 1, "net.peer.name-val", "net.peer.ip-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordPingDurationMinDataPoint(ts, 1, "net.peer.name-val", "net.peer.ip-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordPingDurationStddevDataPoint(ts, 1, "net.peer.name-val", "net.peer.ip-val")

			allMetricsCount++
			mb.RecordPingErrorsDataPoint(ts, 1, "net.peer.name-val", "net.peer.ip-val", AttributeErrorTypeTimeout)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordPingPacketLossDataPoint(ts, 1, "net.peer.name-val", "net.peer.ip-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordPingPacketsReceivedDataPoint(ts, 1, "net.peer.name-val", "net.peer.ip-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordPingPacketsSentDataPoint(ts, 1, "net.peer.name-val", "net.peer.ip-val")

			res := pcommon.NewResource()
			metrics := mb.Emit(WithResource(res))

			if tt.expectEmpty {
				assert.Equal(t, 0, metrics.ResourceMetrics().Len())
				return
			}

			assert.Equal(t, 1, metrics.ResourceMetrics().Len())
			rm := metrics.ResourceMetrics().At(0)
			assert.Equal(t, res, rm.Resource())
			assert.Equal(t, 1, rm.ScopeMetrics().Len())
			ms := rm.ScopeMetrics().At(0).Metrics()
			if tt.metricsSet == testDataSetDefault {
				assert.Equal(t, defaultMetricsCount, ms.Len())
			}
			if tt.metricsSet == testDataSetAll {
				assert.Equal(t, allMetricsCount, ms.Len())
			}
			validatedMetrics := make(map[string]bool)
			for i := 0; i < ms.Len(); i++ {
				switch ms.At(i).Name() {
				case "ping.duration":
					assert.False(t, validatedMetrics["ping.duration"], "Found a duplicate in the metrics slice: ping.duration")
					validatedMetrics["ping.duration"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Round-trip time for ping packets", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("net.peer.name")
					assert.True(t, ok)
					assert.Equal(t, "net.peer.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("net.peer.ip")
					assert.True(t, ok)
					assert.Equal(t, "net.peer.ip-val", attrVal.Str())
				case "ping.duration.avg":
					assert.False(t, validatedMetrics["ping.duration.avg"], "Found a duplicate in the metrics slice: ping.duration.avg")
					validatedMetrics["ping.duration.avg"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Average round-trip time", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("net.peer.name")
					assert.True(t, ok)
					assert.Equal(t, "net.peer.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("net.peer.ip")
					assert.True(t, ok)
					assert.Equal(t, "net.peer.ip-val", attrVal.Str())
				case "ping.duration.max":
					assert.False(t, validatedMetrics["ping.duration.max"], "Found a duplicate in the metrics slice: ping.duration.max")
					validatedMetrics["ping.duration.max"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Maximum round-trip time", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("net.peer.name")
					assert.True(t, ok)
					assert.Equal(t, "net.peer.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("net.peer.ip")
					assert.True(t, ok)
					assert.Equal(t, "net.peer.ip-val", attrVal.Str())
				case "ping.duration.min":
					assert.False(t, validatedMetrics["ping.duration.min"], "Found a duplicate in the metrics slice: ping.duration.min")
					validatedMetrics["ping.duration.min"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Minimum round-trip time", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("net.peer.name")
					assert.True(t, ok)
					assert.Equal(t, "net.peer.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("net.peer.ip")
					assert.True(t, ok)
					assert.Equal(t, "net.peer.ip-val", attrVal.Str())
				case "ping.duration.stddev":
					assert.False(t, validatedMetrics["ping.duration.stddev"], "Found a duplicate in the metrics slice: ping.duration.stddev")
					validatedMetrics["ping.duration.stddev"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Standard deviation of round-trip times", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("net.peer.name")
					assert.True(t, ok)
					assert.Equal(t, "net.peer.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("net.peer.ip")
					assert.True(t, ok)
					assert.Equal(t, "net.peer.ip-val", attrVal.Str())
				case "ping.errors":
					assert.False(t, validatedMetrics["ping.errors"], "Found a duplicate in the metrics slice: ping.errors")
					validatedMetrics["ping.errors"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of errors encountered", ms.At(i).Description())
					assert.Equal(t, "{error}", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityUnspecified, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("net.peer.name")
					assert.True(t, ok)
					assert.Equal(t, "net.peer.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("net.peer.ip")
					assert.True(t, ok)
					assert.Equal(t, "net.peer.ip-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("error.type")
					assert.True(t, ok)
					assert.Equal(t, "timeout", attrVal.Str())
				case "ping.packet_loss":
					assert.False(t, validatedMetrics["ping.packet_loss"], "Found a duplicate in the metrics slice: ping.packet_loss")
					validatedMetrics["ping.packet_loss"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Ratio of packets lost", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("net.peer.name")
					assert.True(t, ok)
					assert.Equal(t, "net.peer.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("net.peer.ip")
					assert.True(t, ok)
					assert.Equal(t, "net.peer.ip-val", attrVal.Str())
				case "ping.packets.received":
					assert.False(t, validatedMetrics["ping.packets.received"], "Found a duplicate in the metrics slice: ping.packets.received")
					validatedMetrics["ping.packets.received"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of packets received", ms.At(i).Description())
					assert.Equal(t, "{packet}", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityUnspecified, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("net.peer.name")
					assert.True(t, ok)
					assert.Equal(t, "net.peer.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("net.peer.ip")
					assert.True(t, ok)
					assert.Equal(t, "net.peer.ip-val", attrVal.Str())
				case "ping.packets.sent":
					assert.False(t, validatedMetrics["ping.packets.sent"], "Found a duplicate in the metrics slice: ping.packets.sent")
					validatedMetrics["ping.packets.sent"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of packets sent", ms.At(i).Description())
					assert.Equal(t, "{packet}", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityUnspecified, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("net.peer.name")
					assert.True(t, ok)
					assert.Equal(t, "net.peer.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("net.peer.ip")
					assert.True(t, ok)
					assert.Equal(t, "net.peer.ip-val", attrVal.Str())
				}
			}
		})
	}
}
